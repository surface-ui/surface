defmodule Mix.Tasks.Compile.SurfaceTest do
  use ExUnit.Case, async: false
  import ExUnit.CaptureIO

  import Mix.Tasks.Compile.Surface
  alias Mix.Task.Compiler.Diagnostic

  @hooks_rel_output_dir "tmp/_hooks"
  @hooks_output_dir Path.join(File.cwd!(), @hooks_rel_output_dir)

  @hooks_index_file Path.join(@hooks_output_dir, "index.js")

  setup_all do
    conf_before = Application.get_env(:surface, :compiler, [])
    Application.put_env(:surface, :compiler, hooks_output_dir: @hooks_rel_output_dir)

    on_exit(fn ->
      Application.put_env(:surface, :compiler, conf_before)
    end)

    :ok
  end

  setup do
    if File.exists?(@hooks_output_dir) do
      File.rm_rf!(@hooks_output_dir)
    end

    on_exit(fn ->
      File.rm_rf!(@hooks_output_dir)
    end)

    :ok
  end

  test "generate index.js with empty object if there's no hooks available" do
    refute File.exists?(@hooks_output_dir)

    assert run([]) == {:noop, []}

    assert File.read!(@hooks_index_file) == """
           /*
           This file was generated by the Surface compiler.
           */

           export default {}
           """
  end

  test "prints and returns `{:ok, diagnostics}` without `return_errors` and `warnings_as_errors`" do
    diagnostic = %Diagnostic{
      message: "test warning",
      file: "file.ex",
      position: 1,
      severity: :warning,
      compiler_name: "Surface"
    }

    output =
      capture_io(:standard_error, fn ->
        assert {:ok, [^diagnostic]} = handle_diagnostics([diagnostic], [])
      end)

    assert output =~ "test warning"
  end

  test "don't print and return `{:error, diagnostics}` with `return_errors` and `warnings_as_errors`" do
    diagnostic = %Diagnostic{
      message: "test warning",
      file: "file.ex",
      position: 1,
      severity: :warning,
      compiler_name: "Surface"
    }

    output =
      capture_io(:standard_error, fn ->
        assert {:error, [^diagnostic]} =
                 handle_diagnostics([diagnostic], return_errors: true, warnings_as_errors: true)
      end)

    refute output =~ "test warning"
  end
end
